name: Deploy to Staging

on:
  push:
    branches:
      - develop
      - staging
  workflow_dispatch:

# Only one staging deployment at a time
concurrency:
  group: deploy-staging
  cancel-in-progress: false

jobs:
  deploy-staging:
    name: Deploy to Staging Environment
    runs-on: ubuntu-latest
    timeout-minutes: 15
    environment:
      name: staging
      url: https://chittycharge-staging.workers.dev

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: TypeScript type check
        run: npm run typecheck

      - name: Run tests
        run: npm test
        continue-on-error: true

      - name: Deploy to Cloudflare Workers (Staging)
        id: deploy
        run: |
          echo "Deploying to staging environment..."
          npx wrangler deploy --env staging 2>&1 | tee deploy-output.txt

          # Extract deployment URL (Workers URL or custom domain)
          DEPLOY_URL=$(grep -oP 'https://[^\s]+' deploy-output.txt | head -1 || echo "https://chittycharge-staging.workers.dev")
          echo "url=$DEPLOY_URL" >> $GITHUB_OUTPUT
        env:
          CLOUDFLARE_API_TOKEN: ${{ secrets.CLOUDFLARE_API_TOKEN }}
          CLOUDFLARE_ACCOUNT_ID: ${{ secrets.CLOUDFLARE_ACCOUNT_ID }}

      - name: Wait for deployment to be ready
        run: sleep 10

      - name: Smoke test - Health check
        id: health_check
        run: |
          HEALTH_URL="${{ steps.deploy.outputs.url }}/health"
          echo "Testing health endpoint: $HEALTH_URL"

          RESPONSE=$(curl -s -o /dev/null -w "%{http_code}" "$HEALTH_URL" || echo "000")

          if [ "$RESPONSE" = "200" ] || [ "$RESPONSE" = "404" ]; then
            echo "✅ Health check passed (HTTP $RESPONSE)"
            echo "status=success" >> $GITHUB_OUTPUT
          else
            echo "⚠️ Health check returned HTTP $RESPONSE"
            echo "status=warning" >> $GITHUB_OUTPUT
          fi
        continue-on-error: true

      - name: Deployment Summary
        if: always()
        run: |
          echo "## Staging Deployment Summary 🚀" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "**Environment:** Staging" >> $GITHUB_STEP_SUMMARY
          echo "**URL:** ${{ steps.deploy.outputs.url }}" >> $GITHUB_STEP_SUMMARY
          echo "**Branch:** \`${{ github.ref_name }}\`" >> $GITHUB_STEP_SUMMARY
          echo "**Commit:** \`${{ github.sha }}\`" >> $GITHUB_STEP_SUMMARY
          echo "**Deployed by:** @${{ github.actor }}" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### Health Check" >> $GITHUB_STEP_SUMMARY
          echo "Status: ${{ steps.health_check.outputs.status == 'success' && '✅ Passed' || '⚠️ Warning' }}" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### Next Steps" >> $GITHUB_STEP_SUMMARY
          echo "- Test the staging environment thoroughly" >> $GITHUB_STEP_SUMMARY
          echo "- Merge to \`main\` to deploy to production" >> $GITHUB_STEP_SUMMARY

      - name: Comment on PR
        if: github.event_name == 'pull_request'
        uses: actions/github-script@v7
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const output = `## Staging Deployment Complete 🚀

            **URL:** ${{ steps.deploy.outputs.url }}
            **Health Check:** ${{ steps.health_check.outputs.status == 'success' && '✅ Passed' || '⚠️ Warning' }}

            The staging environment is ready for testing.`;

            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: output
            });
